// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sea.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_sea_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_sea_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_sea_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_sea_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_sea_2eproto;
namespace sea {
class SeaRequest;
struct SeaRequestDefaultTypeInternal;
extern SeaRequestDefaultTypeInternal _SeaRequest_default_instance_;
class SeaResponse;
struct SeaResponseDefaultTypeInternal;
extern SeaResponseDefaultTypeInternal _SeaResponse_default_instance_;
}  // namespace sea
PROTOBUF_NAMESPACE_OPEN
template<> ::sea::SeaRequest* Arena::CreateMaybeMessage<::sea::SeaRequest>(Arena*);
template<> ::sea::SeaResponse* Arena::CreateMaybeMessage<::sea::SeaResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace sea {

// ===================================================================

class SeaRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sea.SeaRequest) */ {
 public:
  inline SeaRequest() : SeaRequest(nullptr) {}
  ~SeaRequest() override;
  explicit constexpr SeaRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SeaRequest(const SeaRequest& from);
  SeaRequest(SeaRequest&& from) noexcept
    : SeaRequest() {
    *this = ::std::move(from);
  }

  inline SeaRequest& operator=(const SeaRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SeaRequest& operator=(SeaRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SeaRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SeaRequest* internal_default_instance() {
    return reinterpret_cast<const SeaRequest*>(
               &_SeaRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SeaRequest& a, SeaRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SeaRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SeaRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SeaRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SeaRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SeaRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SeaRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SeaRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sea.SeaRequest";
  }
  protected:
  explicit SeaRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestSeaFieldFieldNumber = 1,
  };
  // string request_sea_field = 1;
  void clear_request_sea_field();
  const std::string& request_sea_field() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_request_sea_field(ArgT0&& arg0, ArgT... args);
  std::string* mutable_request_sea_field();
  PROTOBUF_NODISCARD std::string* release_request_sea_field();
  void set_allocated_request_sea_field(std::string* request_sea_field);
  private:
  const std::string& _internal_request_sea_field() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_request_sea_field(const std::string& value);
  std::string* _internal_mutable_request_sea_field();
  public:

  // @@protoc_insertion_point(class_scope:sea.SeaRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr request_sea_field_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sea_2eproto;
};
// -------------------------------------------------------------------

class SeaResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sea.SeaResponse) */ {
 public:
  inline SeaResponse() : SeaResponse(nullptr) {}
  ~SeaResponse() override;
  explicit constexpr SeaResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SeaResponse(const SeaResponse& from);
  SeaResponse(SeaResponse&& from) noexcept
    : SeaResponse() {
    *this = ::std::move(from);
  }

  inline SeaResponse& operator=(const SeaResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SeaResponse& operator=(SeaResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SeaResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SeaResponse* internal_default_instance() {
    return reinterpret_cast<const SeaResponse*>(
               &_SeaResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SeaResponse& a, SeaResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SeaResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SeaResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SeaResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SeaResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SeaResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SeaResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SeaResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sea.SeaResponse";
  }
  protected:
  explicit SeaResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResponseSeaFieldFieldNumber = 1,
  };
  // string response_sea_field = 1;
  void clear_response_sea_field();
  const std::string& response_sea_field() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_response_sea_field(ArgT0&& arg0, ArgT... args);
  std::string* mutable_response_sea_field();
  PROTOBUF_NODISCARD std::string* release_response_sea_field();
  void set_allocated_response_sea_field(std::string* response_sea_field);
  private:
  const std::string& _internal_response_sea_field() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_response_sea_field(const std::string& value);
  std::string* _internal_mutable_response_sea_field();
  public:

  // @@protoc_insertion_point(class_scope:sea.SeaResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr response_sea_field_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sea_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SeaRequest

// string request_sea_field = 1;
inline void SeaRequest::clear_request_sea_field() {
  request_sea_field_.ClearToEmpty();
}
inline const std::string& SeaRequest::request_sea_field() const {
  // @@protoc_insertion_point(field_get:sea.SeaRequest.request_sea_field)
  return _internal_request_sea_field();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SeaRequest::set_request_sea_field(ArgT0&& arg0, ArgT... args) {
 
 request_sea_field_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sea.SeaRequest.request_sea_field)
}
inline std::string* SeaRequest::mutable_request_sea_field() {
  std::string* _s = _internal_mutable_request_sea_field();
  // @@protoc_insertion_point(field_mutable:sea.SeaRequest.request_sea_field)
  return _s;
}
inline const std::string& SeaRequest::_internal_request_sea_field() const {
  return request_sea_field_.Get();
}
inline void SeaRequest::_internal_set_request_sea_field(const std::string& value) {
  
  request_sea_field_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SeaRequest::_internal_mutable_request_sea_field() {
  
  return request_sea_field_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SeaRequest::release_request_sea_field() {
  // @@protoc_insertion_point(field_release:sea.SeaRequest.request_sea_field)
  return request_sea_field_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SeaRequest::set_allocated_request_sea_field(std::string* request_sea_field) {
  if (request_sea_field != nullptr) {
    
  } else {
    
  }
  request_sea_field_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), request_sea_field,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (request_sea_field_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    request_sea_field_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sea.SeaRequest.request_sea_field)
}

// -------------------------------------------------------------------

// SeaResponse

// string response_sea_field = 1;
inline void SeaResponse::clear_response_sea_field() {
  response_sea_field_.ClearToEmpty();
}
inline const std::string& SeaResponse::response_sea_field() const {
  // @@protoc_insertion_point(field_get:sea.SeaResponse.response_sea_field)
  return _internal_response_sea_field();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SeaResponse::set_response_sea_field(ArgT0&& arg0, ArgT... args) {
 
 response_sea_field_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:sea.SeaResponse.response_sea_field)
}
inline std::string* SeaResponse::mutable_response_sea_field() {
  std::string* _s = _internal_mutable_response_sea_field();
  // @@protoc_insertion_point(field_mutable:sea.SeaResponse.response_sea_field)
  return _s;
}
inline const std::string& SeaResponse::_internal_response_sea_field() const {
  return response_sea_field_.Get();
}
inline void SeaResponse::_internal_set_response_sea_field(const std::string& value) {
  
  response_sea_field_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SeaResponse::_internal_mutable_response_sea_field() {
  
  return response_sea_field_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SeaResponse::release_response_sea_field() {
  // @@protoc_insertion_point(field_release:sea.SeaResponse.response_sea_field)
  return response_sea_field_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SeaResponse::set_allocated_response_sea_field(std::string* response_sea_field) {
  if (response_sea_field != nullptr) {
    
  } else {
    
  }
  response_sea_field_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), response_sea_field,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (response_sea_field_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    response_sea_field_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:sea.SeaResponse.response_sea_field)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace sea

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_sea_2eproto
